// Generated by CoffeeScript 1.8.0
(function() {
  var StormService, fs, merge, ospfdService,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  ospfdService = (function(_super) {
    __extends(ospfdService, _super);

    ospfdService.prototype.schema = {
      name: "ospfd",
      type: "object",
      additionalProperties: true,
      properties: {
        hostname: {
          "type": "string",
          "required": true
        },
        password: {
          "type": "string",
          "required": true
        },
        'enable-password': {
          "type": "string",
          "required": false
        },
        'log-file': {
          "type": "string",
          "required": false
        },
        iprouting: {
          name: "ospf routing",
          type: "object",
          required: false,
          additionalProperties: true,
          properties: {
            interfaces: {
              name: "interfaces",
              type: "array",
              items: {
                name: "interface",
                type: "object",
                required: false,
                additionalproperties: true,
                properties: {
                  name: {
                    type: "string",
                    required: false
                  },
                  description: {
                    type: "string",
                    required: false
                  },
                  ip: {
                    name: "ip",
                    type: "array",
                    items: {
                      name: "ospf",
                      type: "object",
                      required: false,
                      additionalproperties: true,
                      properties: {
                        ospfConfig: {
                          type: "string",
                          required: false
                        }
                      }
                    }
                  }
                }
              }
            },
            router: {
              name: "ospf",
              type: "object",
              required: false,
              additionalProperties: true,
              properties: {
                name: {
                  type: "string",
                  required: false
                },
                'default-information': {
                  type: "string",
                  required: false
                },
                'ospf-rid': {
                  type: "string",
                  required: false
                },
                networks: {
                  name: "networks",
                  type: "array",
                  items: {
                    name: "network",
                    type: "string",
                    required: false,
                    additionalproperties: true,
                    properties: {
                      ipaddr: {
                        type: "string",
                        required: false
                      }
                    }
                  }
                },
                redistribute: {
                  name: "redistribute",
                  type: "array",
                  items: {
                    name: "redis",
                    type: "string",
                    required: false,
                    additionalproperties: true,
                    properties: {
                      redis: {
                        type: "string",
                        required: false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        'line': {
          "type": "string",
          "required": false
        }
      }
    };

    ospfdService.prototype.invocation = {
      name: 'ospfd',
      path: '/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    ospfdService.prototype.processArray = function(arraykey, value, config) {
      var keyyy, objj, valuee, _i, _len;
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        objj = value[_i];
        for (keyyy in objj) {
          valuee = objj[keyyy];
          switch (typeof valuee) {
            case "number":
            case "string":
              switch (keyyy) {
                case "name":
                  if (arraykey === "interfaces") {
                    config += "interface" + ' ' + valuee + "\n";
                  }
                  break;
                case "ipaddr":
                  config += "network" + ' ' + valuee + "\n";
                  break;
                case "redis":
                  config += "redistribute" + ' ' + valuee + "\n";
                  break;
                default:
                  config += ' ' + keyyy + ' ' + valuee + "\n";
              }
              break;
            case "boolean":
              config += ' ' + keyyy + "\n";
          }
        }
      }
      return config;
    };

    function ospfdService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/ospf";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/ospf";
      }
      ospfdService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: "" + this.configPath + "/ospfd_" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["--config_file=" + this.configs.service.filename, "-d"],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var key, keyy, keyyy, ospfdconfig, val, value, valuee, _ref;
          ospfdconfig = '';
          _ref = _this.data;
          for (key in _ref) {
            val = _ref[key];
            switch (typeof val) {
              case "object":
                for (keyy in val) {
                  value = val[keyy];
                  switch (typeof value) {
                    case "object":
                      if (keyy === 'interfaces') {
                        ospfdconfig += processArray(keyy, value, ospfdconfig);
                      } else if (keyy === 'router') {
                        for (keyyy in value) {
                          valuee = value[keyyy];
                          switch (valuee) {
                            case "string":
                            case "number":
                              if (keyyy === 'name') {
                                ospfdconfig += ("router " + valuee) + "\n";
                              } else if (keyyy === 'ospf-rid') {
                                ospfdconfig += ' ' + "ospf router-id" + ' ' + valuee + "\n";
                              }
                              break;
                            case "object":
                              ospfdconfig += processArray(keyy, valuee, ospfdconfig);
                          }
                        }
                      }
                  }
                }
                break;
              case "number":
              case "string":
                switch (key) {
                  case "enable-password":
                    ospfdconfig += "enable password" + ' ' + val + "\n";
                    break;
                  case "log-file":
                    ospfdconfig += "log file" + ' ' + val + "\n";
                    break;
                  default:
                    ospfdconfig += key + ' ' + val + "\n";
                }
                break;
              case "boolean":
                ospfdconfig += key + "\n";
            }
          }
          return callback(ospfdconfig);
        };
      })(this);
    }

    ospfdService.prototype.updateOspf = function(ospfdconfig, callback) {
      this.data = ospfdconfig;
      return this.generate('service', callback);
    };


    /*
    getconfig: ->
        return @configs
    getinvocation: ->
        return @invocation
     */

    ospfdService.prototype.destructor = function() {
      return this.eliminate();
    };

    return ospfdService;

  })(StormService);

  module.exports = ospfdService;

}).call(this);
