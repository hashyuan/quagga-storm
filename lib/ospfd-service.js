// Generated by CoffeeScript 1.8.0
(function() {
  var StormService, fs, merge, ospfdService,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  ospfdService = (function(_super) {
    __extends(ospfdService, _super);

    ospfdService.prototype.schema = {
      name: "ospfd",
      type: "object",
      additionalProperties: true,
      properties: {
        hostname: {
          "type": "string",
          "required": true
        },
        password: {
          "type": "string",
          "required": true
        },
        'enable-password': {
          "type": "string",
          "required": false
        },
        'log-file': {
          "type": "string",
          "required": false
        },
        interfaces: {
          name: "interfaces",
          type: "array",
          items: {
            name: "interface",
            type: "object",
            required: false,
            additionalProperties: true,
            properties: {
              description: {
                type: "string",
                required: false
              }
            }
          }
        },
        routes: {
          name: "router ospf",
          type: "object",
          required: false,
          additionalProperties: true,
          properties: {
            networks: {
              name: "networks",
              type: "array",
              items: {
                name: "network",
                type: "string",
                required: false
              }
            },
            'default-information': {
              type: "string",
              required: false
            }
          }
        },
        'line': {
          "type": "string",
          "required": false
        }
      }
    };

    ospfdService.prototype.invocation = {
      name: 'ospfd',
      path: '/bin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    function ospfdService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/quagga";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/ospfd";
      }
      ospfdService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: "" + this.configPath + "/ospfd_" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["--config_file", "" + this.configs.service.filename, "-d"],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var key, keyy, keyyy, objj, ospfdconfig, val, value, valuee, _i, _len, _ref;
          ospfdconfig = '';
          _ref = _this.data;
          for (key in _ref) {
            val = _ref[key];
            switch (typeof val) {
              case "object":
                for (keyy in val) {
                  value = val[keyy];
                  switch (typeof value) {
                    case "string":
                    case "number":
                      ospfdconfig += keyy + ' ' + value + "\n";
                      break;
                    case "object":
                      for (_i = 0, _len = value.length; _i < _len; _i++) {
                        objj = value[_i];
                        for (keyyy in objj) {
                          valuee = objj[keyyy];
                          ospfdconfig += keyyy + ' ' + valuee + "\n";
                        }
                      }
                  }
                }
                break;
              case "number":
              case "string":
                ospfdconfig += key + ' ' + val + "\n";
                break;
              case "boolean":
                ospfdconfig += key + "\n";
            }
          }
          return callback(ospfdconfig);
        };
      })(this);
    }

    ospfdService.prototype.getconfig = function() {
      return this.configs;
    };

    ospfdService.prototype.getinvocation = function() {
      return this.invocation;
    };

    ospfdService.prototype.destructor = function() {
      return this.eliminate();
    };

    return ospfdService;

  })(StormService);

  module.exports = ospfdService;

}).call(this);
