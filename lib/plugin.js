// Generated by CoffeeScript 1.8.0
(function() {
  var OspfdRegistry, OspfdService, ZebraRegistry, ZebraService, async, fs;

  fs = require('fs');

  ZebraService = require('./zebra-service');

  ZebraRegistry = require('./zebra-registry');

  OspfdService = require('./ospfd-service');

  OspfdRegistry = require('./ospfd-registry');


  /*
  RipdService = require './ripd-service'
  RipdRegistry = require './ripd-registry'
  BgpdService = require './bgpd-service'
  BgpdRegistry = require './bgpd-registry'
   */

  async = require('async');

  this.include = function() {
    var agent, err, oplugindir, oregistry, plugindir, zplugindir, zregistry;
    agent = this.settings.agent;
    if (agent == null) {
      throw new Error("this plugin requires to be running in the context of a valid StormAgent!");
    }
    plugindir = this.settings.plugindir;
    if (plugindir == null) {
      plugindir = "/var/stormflash/plugins";
    }
    zplugindir = plugindir + "/zebra";
    if (zplugindir != null) {
      try {
        fs.mkdir("" + zplugindir, function() {});
      } catch (_error) {
        err = _error;
        agent.log("Error while creating zebra plugin dir", err);
      }
    }
    zregistry = new ZebraRegistry(zplugindir + "/zebra.db");
    zregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof ZebraService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Zebra " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Zebra " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Zebra " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    oplugindir = plugindir + "/ospf";
    if (oplugindir != null) {
      try {
        fs.mkdir("" + oplugindir, function() {});
      } catch (_error) {
        err = _error;
        agent.log("Error while creating ospf plugin dir", err);
      }
    }
    oregistry = new OspfdRegistry(oplugindir + "/ospfd.db");
    oregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof OspfdService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Ospfd " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Ospfd " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Ospfd " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });

    /*
     *ripd routine
    rregistry = new RipdRegistry plugindir+"/Ripd.db"    
    rregistry.on 'ready', ->
        for service in @list()
            continue unless service instanceof RipdService
    
            agent.log "restore: trying to recover:", service
            do (service) -> service.generate (err) ->
                if err?
                    return agent.log "restore: Ripd #{service.id} failed to generate configs!"
                agent.invoke service, (err, instance) ->
                    if err?
                        agent.log "restore: Ripd #{service.id} invoke failed with:", err
                    else
                        agent.log "restore: Ripd #{service.id} invoke succeeded wtih #{instance}"
    
     *bgpd routine
    bregistry = new BgpdRegistry plugindir+"/Bgpd.db"    
    bregistry.on 'ready', ->
        for service in @list()
            continue unless service instanceof BgpdService
    
            agent.log "restore: trying to recover:", service
            do (service) -> service.generate (err) ->
                if err?
                    return agent.log "restore: Bgpd #{service.id} failed to generate configs!"
                agent.invoke service, (err, instance) ->
                    if err?
                        agent.log "restore: Bgpd #{service.id} invoke failed with:", err
                    else
                        agent.log "restore: Bgpd #{service.id} invoke succeeded wtih #{instance}"
     */
    this.post({
      '/quagga/zebra': function() {
        var zservice;
        try {
          zservice = new ZebraService(null, this.body, {
            configPath: '/var/stormflash/plugins/zebra',
            logPath: '/var/log/zebra'
          });
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        agent.log("POST body: ", this.body);
        return zservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /Zebra generation results :" + JSON.stringify(results));
            zregistry.add(zservice);
            return agent.invoke(zservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: zservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.get({
      '/quagga/zebra': function() {
        return this.send(zregistry.list());
      }
    });
    this.get({
      '/quagga/zebra/:id': function() {
        var service;
        service = zregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        } else {
          return this.send(service);
        }
      }
    });
    this.put({
      '/quagga/zebra/:id': function() {
        var service;
        service = zregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        }
        return service.updateZebra(this.body, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("service.updateZebra:", results);
            return _this.send({
              updated: true
            });
          };
        })(this));
      }
    });
    this.del({
      '/quagga/zebra/:id': function() {
        var service;
        service = zregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        }
        zregistry.remove(this.params.id);
        return this.send(204);
      }
    });
    this.post({
      '/quagga/ospfd': function() {
        var oservice;
        try {
          oservice = new OspfdService(null, this.body, {
            configPath: '/var/stormflash/plugins/ospf',
            logPath: '/var/log/ospf'
          });
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        agent.log("POST body: ", this.body);
        return oservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /ospfd generation results :" + JSON.stringify(results));
            oregistry.add(oservice);
            return agent.invoke(oservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: oservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.get({
      '/quagga/ospfd': function() {
        return this.send(oregistry.list());
      }
    });
    this.get({
      '/quagga/ospfd/:id': function() {
        var service;
        service = oregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        } else {
          return this.send(service);
        }
      }
    });
    this.put({
      '/quagga/ospfd/:id': function() {
        var service;
        service = oregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        }
        return service.updateOspf(this.body, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("service.updateOspf:", results);
            return _this.send({
              updated: true
            });
          };
        })(this));
      }
    });
    return this.del({
      '/quagga/ospfd/:id': function() {
        var service;
        service = oregistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        }
        oregistry.remove(this.params.id);
        return this.send(204);
      }
    });

    /*
    @post '/quagga/ripd': ->
        try
            rservice = new RipdService null, @body, {}
        catch err
            return @next err
            
        rservice.generate (err, results) =>
            return @next err if err?
            agent.log "POST /ripd generation resultis :" +  JSON.stringify results
            rregistry.add rservice
            agent.invoke rservice, (err, instance) =>
                if err?
                     *serverRegistry.remove service.id
                    return @next err
                else
                    @send {id: rservice.id, running: true}
    
    @post '/quagga/bgpd': ->
        try
            bservice = new BgpdService null, @body, {}
        catch err
            return @next err
            
        bservice.generate (err, results) =>
            return @next err if err?
            agent.log "POST /quagga/bgpd generation result  : " +  JSON.stringify results
            bregistry.add bservice
            agent.invoke bservice, (err, instance) =>
                if err?
                     *serverRegistry.remove service.id
                    return @next err
                else
                    @send {id: bservice.id, running: true}
    
    
    @get '/quagga/zebra/config': ->
        @send zservice.getconfig()
    
    @get '/quagga/zebra/invocation': ->
        @send zservice.getinvocation()
    
    @get '/quagga/ospfd/config': ->
        @send oservice.getconfig()
    
    @get '/quagga/ospfd/invocation': ->
        @send oservice.getinvocation()
     */
  };

}).call(this);
