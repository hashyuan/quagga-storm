// Generated by CoffeeScript 1.8.0
(function() {
  var BgpdRegistry, BgpdService, OspfdRegistry, OspfdService, RipdRegistry, RipdService, ZebraRegistry, ZebraService, async;

  ZebraService = require('./zebra-service');

  ZebraRegistry = require('./zebra-registry');

  OspfdService = require('./ospfd-service');

  OspfdRegistry = require('./ospfd-registry');

  RipdService = require('./ripd-service');

  RipdRegistry = require('./ripd-registry');

  BgpdService = require('./bgpd-service');

  BgpdRegistry = require('./bgpd-registry');

  async = require('async');

  this.include = function() {
    var agent, bregistry, oregistry, plugindir, rregistry, zregistry;
    agent = this.settings.agent;
    if (agent == null) {
      throw new Error("this plugin requires to be running in the context of a valid StormAgent!");
    }
    plugindir = this.settings.plugindir;
    if (plugindir == null) {
      plugindir = "/var/stormflash/plugins/zebra";
    }
    zregistry = new ZebraRegistry(plugindir + "/Zebra.db");
    zregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof ZebraService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Zebra " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Zebra " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Zebra " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    oregistry = new OspfdRegistry(plugindir + "/Ospfd.db");
    oregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof OspfdService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Ospfd " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Ospfd " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Ospfd " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    rregistry = new RipdRegistry(plugindir + "/Ripd.db");
    rregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof RipdService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Ripd " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Ripd " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Ripd " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    bregistry = new BgpdRegistry(plugindir + "/Bgpd.db");
    bregistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof BgpdService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: Bgpd " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: Bgpd " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: Bgpd " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    this.post({
      '/quagga/zebra': function() {
        var err, zservice;
        try {
          zservice = new ZebraService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return zservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /Zebra generation resultis suresh :" + JSON.stringify(results));
            zregistry.add(zservice);
            return agent.invoke(zservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: zservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.post({
      '/quagga/ospfd': function() {
        var err, oservice;
        try {
          oservice = new OspfdService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return oservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /ospfd generation resultis suresh :" + JSON.stringify(results));
            oregistry.add(oservice);
            return agent.invoke(oservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: oservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.post({
      '/quagga/ripd': function() {
        var err, rservice;
        try {
          rservice = new RipdService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return rservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /ripd generation resultis :" + JSON.stringify(results));
            rregistry.add(rservice);
            return agent.invoke(rservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: rservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    return this.post({
      '/quagga/bgpd': function() {
        var bservice, err;
        try {
          bservice = new BgpdService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return bservice.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /quagga/bgpd generation result  : " + JSON.stringify(results));
            bregistry.add(bservice);
            return agent.invoke(bservice, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: bservice.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
  };


  /*
      @get '/quagga/zebra/config': ->
          @send zservice.getconfig()
  
      @get '/quagga/zebra/invocation': ->
          @send zservice.getinvocation()
  
      @get '/quagga/ospfd/config': ->
          @send oservice.getconfig()
  
      @get '/quagga/ospfd/invocation': ->
          @send oservice.getinvocation()
   */

}).call(this);
