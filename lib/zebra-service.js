// Generated by CoffeeScript 1.8.0
(function() {
  var StormService, fs, merge, zebraService,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  zebraService = (function(_super) {
    __extends(zebraService, _super);

    zebraService.prototype.schema = {
      name: "zebra",
      type: "object",
      required: true,
      additionalProperties: true,
      properties: {
        hostname: {
          "type": "string",
          "required": false
        },
        password: {
          "type": "string",
          "required": true
        },
        'enable-password': {
          "type": "string",
          "required": false
        },
        'log-file': {
          "type": "string",
          "required": false
        },
        interfaces: {
          name: "interfaces",
          type: "array",
          items: {
            type: "object",
            required: false,
            additionalProperties: true,
            properties: {
              name: {
                type: "string",
                required: "false"
              },
              description: {
                type: "string",
                required: false
              },
              'link-detect': {
                "type": "boolean",
                "required": false
              },
              'ip-address': {
                "type": "string",
                "required": false
              }
            }
          }
        },
        'ip-route': {
          "type": "string",
          "required": false
        },
        'ip-forwarding': {
          "type": "boolean",
          "required": false
        },
        'ipv6-forwarding': {
          "type": "boolean",
          "required": false
        },
        'line': {
          "type": "string",
          "required": false
        }
      }
    };

    zebraService.prototype.invocation = {
      name: 'zebra',
      path: '/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    zebraService.prototype.processArray = function(arraykey, value, config) {
      var key, obj, valuee, _i, _len;
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        obj = value[_i];
        for (key in obj) {
          valuee = obj[key];
          switch (typeof valuee) {
            case "number":
            case "string":
              switch (key) {
                case "name":
                  if (arraykey === "interfaces") {
                    config += "interface" + ' ' + valuee + "\n";
                  }
                  break;
                case "ip-address":
                  config += ' ' + "ip address" + ' ' + valuee + "\n";
                  break;
                default:
                  config += ' ' + key + ' ' + valuee + "\n";
              }
              break;
            case "boolean":
              config += ' ' + key + "\n";
          }
        }
      }
      return config;
    };

    function zebraService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/zebra";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/zebra";
      }
      zebraService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: "" + this.configPath + "/zebra_" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["--config_file=" + this.configs.service.filename, "-d"],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var key, val, zebraconfig, _ref;
          zebraconfig = '';
          _ref = _this.data;
          for (key in _ref) {
            val = _ref[key];
            switch (typeof val) {
              case "object":
                zebraconfig += processArray(key, val, zebraconfig);
                break;
              case "number":
              case "string":
                switch (key) {
                  case "enable-password":
                    zebraconfig += "enable password" + ' ' + val + "\n";
                    break;
                  case "log-file":
                    zebraconfig += "log file" + ' ' + val + "\n";
                    break;
                  case "ip-route":
                    zebraconfig += "ip route" + ' ' + val + "\n";
                    break;
                  default:
                    zebraconfig += key + ' ' + val + "\n";
                }
                break;
              case "boolean":
                switch (key) {
                  case "ip-forwarding":
                    zebraconfig += "ip forwarding" + "\n";
                    break;
                  case "ipv6-forwarding":
                    zebraconfig += "ipv6 forwarding" + "\n";
                }
            }
          }
          return callback(zebraconfig);
        };
      })(this);
    }

    zebraService.prototype.updateZebra = function(zebraconfig, callback) {
      this.data = zebraconfig;
      return this.generate('service', callback);
    };


    /*        
    getconfig: ->
        return @configs
    getinvocation: ->
        return @invocation
     */

    zebraService.prototype.destructor = function() {
      return this.eliminate();
    };

    return zebraService;

  })(StormService);

  module.exports = zebraService;

}).call(this);
