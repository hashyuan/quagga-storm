// Generated by CoffeeScript 1.7.1
(function() {
  var StormData, StormRegistry, ZebraService, zebraRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  ZebraService = require('./zebra-service');

  zebraRegistry = (function(_super) {
    __extends(zebraRegistry, _super);

    function zebraRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        console.log("restoring " + key + " with:", val);
        entry = new ZebraService(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      zebraRegistry.__super__.constructor.call(this, filename);
    }

    zebraRegistry.prototype.add = function(service) {
      var entry;
      if (!(service instanceof ZebraService)) {
        return;
      }
      entry = zebraRegistry.__super__.add.call(this, service.id, service);
      return entry.on("running", (function(_this) {
        return function(instance) {
          if (entry.instance !== instance) {
            entry.instance = instance;
            return _this.update(entry);
          }
        };
      })(this));
    };

    zebraRegistry.prototype.update = function(service) {
      service.data.instance = service.instance;
      zebraRegistry.__super__.update.call(this, service.id, service);
      return delete service.data.instance;
    };

    zebraRegistry.prototype.get = function(key) {
      var entry;
      entry = zebraRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof ZebraService) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return zebraRegistry;

  })(StormRegistry);

  module.exports = zebraRegistry;

}).call(this);
