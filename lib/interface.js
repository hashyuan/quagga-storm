// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, Start, Stop, Update, Valid, Validate, Validator, assert, async, getPromise, methods, needle, schema, schema_ospfd, schema_zebra;

  Valid = require('jsonschema').Validator;

  Validator = new Valid;

  assert = require('assert');

  Promise = require('bluebird');

  async = require('async');

  needle = Promise.promisifyAll(require('needle'));

  schema_zebra = {
    name: "zebra",
    type: "object",
    required: true,
    additionalProperties: false,
    properties: {
      hostname: {
        "type": "string",
        "required": false
      },
      password: {
        "type": "string",
        "required": true
      },
      'enable-password': {
        "type": "string",
        "required": false
      },
      'log-file': {
        "type": "string",
        "required": false
      },
      interfaces: {
        name: "interfaces",
        type: "array",
        items: {
          type: "object",
          required: false,
          additionalProperties: false,
          properties: {
            name: {
              type: "string",
              required: "false"
            },
            description: {
              type: "string",
              required: false
            },
            'link-detect': {
              "type": "boolean",
              "required": false
            },
            'ip-address': {
              "type": "string",
              "required": false
            }
          }
        }
      },
      'ip-route': {
        "type": "string",
        "required": false
      },
      'ip-forwarding': {
        "type": "boolean",
        "required": false
      },
      'no-ip-forwarding': {
        "type": "boolean",
        "required": false
      },
      'ipv6-forwarding': {
        "type": "boolean",
        "required": false
      },
      'line': {
        "type": "string",
        "required": false
      }
    }
  };

  schema_ospfd = {
    name: "ospfd",
    type: "object",
    additionalProperties: false,
    properties: {
      hostname: {
        "type": "string",
        "required": false
      },
      password: {
        "type": "string",
        "required": true
      },
      'enable-password': {
        "type": "string",
        "required": false
      },
      'log-file': {
        "type": "string",
        "required": false
      },
      iprouting: {
        name: "ospf routing",
        type: "object",
        required: false,
        additionalProperties: false,
        properties: {
          interfaces: {
            name: "interfaces",
            type: "array",
            items: {
              name: "interface",
              type: "object",
              required: false,
              additionalProperties: false,
              properties: {
                name: {
                  type: "string",
                  required: false
                },
                description: {
                  type: "string",
                  required: false
                },
                ip: {
                  name: "ip",
                  type: "array",
                  items: {
                    type: "object",
                    required: false,
                    additionalProperties: false,
                    properties: {
                      ospfConfig: {
                        type: "string",
                        required: false
                      }
                    }
                  }
                }
              }
            }
          },
          router: {
            name: "ospf",
            type: "object",
            required: false,
            additionalProperties: false,
            properties: {
              name: {
                type: "string",
                required: false
              },
              'default-information': {
                type: "string",
                required: false
              },
              'ospf-rid': {
                type: "string",
                required: false
              },
              networks: {
                name: "networks",
                type: "array",
                items: {
                  name: "network",
                  type: "object",
                  required: false,
                  additionalProperties: false,
                  properties: {
                    ipaddr: {
                      type: "string",
                      required: false
                    }
                  }
                }
              },
              redistribute: {
                name: "redistribute",
                type: "array",
                items: {
                  name: "redis",
                  type: "object",
                  required: false,
                  additionalProperties: false,
                  properties: {
                    redis: {
                      type: "string",
                      required: false
                    }
                  }
                }
              }
            }
          }
        }
      },
      'line': {
        "type": "string",
        "required": false
      }
    }
  };

  schema = {
    "zebra": schema_zebra,
    "ospfd": schema_ospfd
  };

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  Validate = function(obj, schema, callback) {
    var options, res, _ref;
    options = {};
    options.propertyName = schema.name;
    res = Validator.validate(obj, schema, options);
    console.log("quagga-storm.Validate: " + schema.name + ":\n", res.errors);
    if ((_ref = res.errors) != null ? _ref.length : void 0) {
      return false;
    } else {
      return true;
    }
  };

  Start = function(context) {
    var config, configObj, configs, _ref;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('quagga-storm.Start missingParams');
    }
    if (context.instances == null) {
      context.instances = [];
    }
    configObj = (_ref = context.service.factoryConfig) != null ? _ref.config : void 0;
    config = configObj[context.service.name];
    configs = [];
    if (config.enable && config.coreConfig) {
      configs.push({
        name: 'zebra',
        config: config.coreConfig
      });
    }
    if (config.protocol.ospf.enable && config.protocol.ospf.config) {
      configs.push({
        name: 'ospfd',
        config: config.protocol.ospf.config
      });
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(configs, function(config) {
          return needle.postAsync(context.baseUrl + ("/quagga/" + config.name), config.config, {
            json: true
          }).then((function(_this) {
            return function(resp) {
              if (resp[0].statusCode !== 200) {
                throw new Error('invalidStatusCode');
              }
              return {
                name: config.name,
                id: resp[1].id
              };
            };
          })(this))["catch"]((function(_this) {
            return function(err) {
              throw err;
            };
          })(this));
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        if (resp) {
          resp = resp.filter(function(instance) {
            if (instance) {
              return true;
            }
          });
        }
        context.instances = resp;
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var instances;
    instances = context != null ? context.instances : void 0;
    return getPromise().then(function(resp) {
      return Promise.map(instances, (function(_this) {
        return function(instance) {
          return needle.deleteAsync(context.baseUrl + ("/quagga/" + instance.name + "/" + instance.id), null).then(function(resp) {
            if (resp[0].statusCode !== 204) {
              throw new Error({
                name: 'invalidStatusCode',
                value: resp[0].statusCode
              });
            }
            return 'done';
          })["catch"](function(err) {
            throw err;
          });
        };
      })(this));
    })["catch"]((function(_this) {
      return function(error) {
        throw error;
      };
    })(this));
  };

  Update = function(context) {
    var conf, config, instance, policyConfig, _i, _len, _ref;
    if (!(context.instances && context.policyConfig)) {
      throw new Error({
        name: 'quagga-storm.Update missingParams'
      });
    }
    policyConfig = {};
    config = context.policyConfig[context.service.name];
    if (config.enable && config.coreConfig) {
      policyConfig.zebra = config.coreConfig;
    }
    if (config.protocol.ospf.enable && config.protocol.ospf.config) {
      policyConfig.ospfd = config.protocol.ospf.config;
    }
    _ref = context.instances;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      instance = _ref[_i];
      conf = policyConfig[instance.name];
      if (!Validate(conf, schema[instance.name])) {
        throw new Error("Faii to validate the config of " + instance.name);
      }
      instance.conf = policyConfig[instance.name];
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(context.instances, function(instance) {
          return needle.putAsync(context.baseUrl + ("/quagga/" + instance.name + "/" + instance.id), instance.conf, {
            json: true
          }).then(function(resp) {
            var entry;
            if (resp[0].statusCode !== 200) {
              throw new Error('invalidStatusCode');
            }
            (entry = {})[instance.name] = instance.id;
            return entry;
          })["catch"](function(err) {
            throw err;
          });
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return resp;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  methods = {
    start: Start,
    stop: Stop,
    update: Update
  };

  module.exports.Methods = methods;


  /*
  if require.main is module
      context =
          baseUrl: "http://10.0.3.227:5000"
          bInstalledPackages: false
          bFactoryPush: false
          factoryConfig:
              "zebra":
                  "password": "zebra"
                  "enable-password": "zebra"
                  "log-file": "/var/log/zebra.log"
                  "line": "vty"
              "ospfd":
                  "password": "zebra"
                  "enable-password": "zebra"
                  "log-file": "/var/log/ospf.log"
                  "line": "vty"
          policyConfig:
              "zebra":
                  "password": "ospfd"
                  "enable-password": "ospfd"
                  "log-file": "/var/log/zebra.log"
                  "interfaces": [
                      {
                      "name": "wan0"
                      "description": "WAN Link"
                      "link-detect": true
                      }
                  ]
                  "ip-forwarding": true
                  "ip-route": "10.1.1.0/24 172.12.1.5"
                  "line": "vty"
              "ospfd":
                  "password": "ospfd"
                  "enable-password": "ospfd"
                  "log-file": "/var/log/ospf.log"
                  "iprouting":
                      "interfaces": [
                          {
                              "name": "wan0"
                              "description": "WAN Link"
                          },
                          {
                              "name": "tun4"
                              "description": "link to OSPF router"
                              "ip": [
                                  {
                                      "ospfConfig": "network point-to-point"
                                  },
                                  {
                                      "ospfConfig": "mtu-ignore"
                                  }
                              ]
                          }
                          ]
                      "router":
                          "name": "ospf"
                          "default-information": "originate metric 100"
                          "ospf-rid": "3.3.3.3"
                          "networks": [
                              {
                                  "ipaddr": "172.12.1.4/30 area 0.0.0.1"
                              }
                              ]
                          "redistribute": [
                              {
                                  "redis": "kernel"
                              },
                              {
                                  "redis": "connected"
                              },
                              {
                                  "redis": "static"
                              }
                          ]
                  "line": "vty"
  
  
      getPromise()
      .then (resp) =>
          return Start context
      .catch (err) =>
          console.log "Start err ", err
      .then (resp) =>
          console.log "result from Start:\n ", resp
          return Update context
      .catch (err) =>
          console.log "Update err ", err
      .then (resp) =>
          console.log "result from Update:\n ", resp
          return Stop context
      .catch (err) =>
          console.log "Stop err ", err
      .then (resp) =>
          console.log "result from Stop:\n ", resp
      .done
   */

}).call(this);
